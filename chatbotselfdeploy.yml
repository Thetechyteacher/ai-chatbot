AWSTemplateFormatVersion: 2010-09-09
Description: Create resources for lab to build a devsecops chatbot
Parameters:
  UserProfileName:
    Type: String
    Description: The user profile name for the SageMaker workshop
    Default: 'sagemakeruser'
  DomainName:
    Type: String
    Description: The domain name of the Sagemaker studio instance
    Default: 'genai-devops-chatbot'


Resources:
  LoggingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub genai-devsecops-chatbot3-logging-${AWS::AccountId}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: true
  LoggingBucketBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: 
        Ref: 'LoggingBucket'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 'logging.s3.amazonaws.com'
            Action:
              - s3:PutObject
              - s3:GetObject
            Resource: 
              - !Sub 'arn:aws:s3:::genai-devsecops-chatbot3-logging-${AWS::AccountId}'
              - !Sub 'arn:aws:s3:::genai-devsecops-chatbot3-logging-${AWS::AccountId}/*'
            Condition:
              StringEquals:
                "aws:SourceAccount": !Ref AWS::AccountId
  GenAIDevSecOpsChatbotS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub genai-devsecops-chatbot3-${AWS::AccountId}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: true
      LoggingConfiguration:
        DestinationBucketName: 
          Ref: 'LoggingBucket'
  GenAIDevSecOpsChatbotS3BucketBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket:
        Ref: 'GenAIDevSecOpsChatbotS3Bucket'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: 
              Service: 'appflow.amazonaws.com'
            Action: 
             - 's3:PutObject'
             - 's3:AbortMultipartUpload'
             - 's3:ListMultipartUploadParts'
             - 's3:ListBucketMultipartUploads'
             - 's3:GetBucketAcl'
             - 's3:PutObjectAcl'
            Resource:
              - !Sub 'arn:aws:s3:::genai-devsecops-chatbot3-${AWS::AccountId}'
              - !Sub 'arn:aws:s3:::genai-devsecops-chatbot3-${AWS::AccountId}/*'
            Condition: 
              StringEquals: 
                "aws:SourceAccount": !Ref AWS::AccountId
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/IAMFullAccess'
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  SageMakerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: s3-access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource: arn:aws:s3:::*
        - PolicyName: lambda-deployment
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - lambda:CreateFunction
                  - lambda:DeleteFunction
                  - lambda:InvokeFunction
                  - lambda:UpdateFunctionCode
                Resource:
                  - "arn:aws:lambda:*:*:function:*"
        - PolicyName: bedrock-deployment
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action:
                  - bedrock:*
                Resource:
                  - "*"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - sagemaker.amazonaws.com
                - bedrock.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/AWSCloudFormationFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonKendraFullAccess'
        - 'arn:aws:iam::aws:policy/IAMFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonEC2FullAccess'




  LambdaExecutionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Path: /
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: CloudWatchLogsPermissions
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Sub "arn:${AWS::Partition}:logs:*:*:*"
          - Sid: SageMakerDomainPermission
            Effect: Allow
            Action:
              - sagemaker:ListDomains
              - sagemaker:CreateDomain
              - sagemaker:DescribeDomain
              - sagemaker:DeleteDomain
              - sagemaker:UpdateDomain
              - sagemaker:ListUserProfiles
              - sagemaker:CreateUserProfile
              - sagemaker:UpdateUserProfile
              - sagemaker:DeleteUserProfile
              - sagemaker:DescribeUserProfile
              - sagemaker:ListApps
              - sagemaker:CreateApp
              - sagemaker:DescribeApp
              - sagemaker:DeleteApp
              - sagemaker:UpdateApp
            Resource:
              - !Sub "arn:${AWS::Partition}:sagemaker:*:*:domain/*"
              - !Sub "arn:${AWS::Partition}:sagemaker:*:*:user-profile/*"
              - !Sub "arn:${AWS::Partition}:sagemaker:*:*:app/*"
          - Sid: SageMakerProjectsPermission
            Effect: Allow
            Action:
              - servicecatalog:AcceptPortfolioShare
              - sagemaker:EnableSagemakerServicecatalogPortfolio
              - sagemaker:DisableSagemakerServicecatalogPortfolio
            Resource: '*'
          - Sid: ServiceCatalogPermission
            Effect: Allow
            Action:
              - servicecatalog:*
            Resource: '*'
          - Sid: SageMakerExecPassRole
            Effect: Allow
            Action:
              - iam:PassRole
            Resource: !GetAtt  SageMakerExecutionRole.Arn
      Roles:
        - !Ref  LambdaExecutionRole


  DeployEndpointLambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/IAMFullAccess'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
  DeployEndpointLambdaExecutionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Path: /
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: CloudWatchLogsPermissions
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Sub "arn:${AWS::Partition}:logs:*:*:*"
          - Sid: LambdaPermissions
            Effect: Allow
            Action:
              - lambda:CreateFunction
              - lambda:DeleteFunction
              - lambda:InvokeFunction
              - lambda:UpdateFunctionCode
            Resource:
              - "arn:aws:lambda:*:*:function:*sagemaker*"
          - Sid: SageMakerSQSPermission
            Effect: Allow
            Action:
              - sqs:CreateQueue
              - sqs:SendMessage
            Resource:
              - "arn:aws:sqs:*:*:*sagemaker*"
          - Sid: SageMakerCreateEndpointPermission
            Effect: Allow
            Action:
              - sagemaker:CreateEndpointConfig
              - sagemaker:CreateEndpoint
            Resource:
              - "arn:aws:sagemaker:*:*:endpoint-config/*"
              - "arn:aws:sagemaker:*:*:endpoint/*"
      Roles:
        - !Ref  DeployEndpointLambdaExecutionRole

  LambdaLifecycleExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /

  LambdaLifecycleExecutionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Path: /
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: CloudWatchLogsPermissions
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Sub "arn:${AWS::Partition}:logs:*:*:*"
          - Sid: SageMakerDomainPermission
            Effect: Allow
            Action:
              - sagemaker:UpdateUserProfile
              - sagemaker:CreateStudioLifecycleConfig
            Resource: '*'
      Roles:
        - !Ref  LambdaLifecycleExecutionRole

  DomainDeploymentDelay:
    Type: 'Custom::Delay'
    DependsOn: SageMakerExecutionRole
    Properties:
      ServiceToken: !GetAtt DelayLambda.Arn
      TimeToWait: 300

  DelayLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: "index.handler"
      Timeout: 660
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Code:
        ZipFile: |
          import json
          import cfnresponse
          import time
          def handler(event, context):
            time_to_wait = int(event['ResourceProperties']['TimeToWait'])
            print(f'Waiting for {time_to_wait} seconds')
            time.sleep(time_to_wait)
            print(f'Waiting finished')
            cfnresponse.send(event, context, cfnresponse.SUCCESS, {},'')

  DefaultVpcLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CFGetDefaultVpcId
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse

          ec2 = boto3.client('ec2')

          def lambda_handler(event, context):
              if 'RequestType' in event and event['RequestType'] == 'Create':
                  vpc_id = get_default_vpc_id()
                  subnets =  get_subnets_for_vpc(vpc_id)
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {'VpcId': vpc_id , "Subnets" : subnets}, '')
              else:
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {},'')

          def get_default_vpc_id():
              vpcs = ec2.describe_vpcs(Filters=[{'Name': 'is-default', 'Values': ['true']}])
              vpcs = vpcs['Vpcs']
              vpc_id = vpcs[0]['VpcId']
              return vpc_id


          def get_subnets_for_vpc(vpcId):
              response = ec2.describe_subnets(
                  Filters=[
                      {
                          'Name': 'vpc-id',
                          'Values': [vpcId]
                      }
                  ]
              )
              subnet_ids = []
              for subnet in response['Subnets']:
                  subnet_ids.append(subnet['SubnetId'])
              return subnet_ids
      Description: Return default VPC ID and Subnets
      Handler: index.lambda_handler
      MemorySize: 512
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Timeout: 5
  DefaultVpcFinder:
    Type: Custom::ResourceForFindingDefaultVpc
    Properties:
      ServiceToken: !GetAtt DefaultVpcLambda.Arn


  DeployEndpointLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: EndpointDeployer
      Code:
        ZipFile: |
          import json
          import boto3

          def lambda_handler(event, context):
              sm_client = boto3.client("sagemaker")

              # The name of the model created in the Pipeline CreateModelStep
              model_name = event["model_name"]
              endpoint_config_name = event["endpoint_config_name"]
              endpoint_name = event["endpoint_name"]

              create_endpoint_config_response = sm_client.create_endpoint_config(
                  EndpointConfigName=endpoint_config_name,
                  ProductionVariants=[
                      {
                          "InstanceType": "ml.m5.xlarge",
                          "InitialVariantWeight": 1,
                          "InitialInstanceCount": 1,
                          "ModelName": model_name,
                          "VariantName": "AllTraffic",
                      }
                  ],
              )

              create_endpoint_response = sm_client.create_endpoint(EndpointName=endpoint_name, EndpointConfigName=endpoint_config_name)
              return {
                  "statusCode": 200,
                  "body": json.dumps("Created Endpoint!"),
                  "other_key": "example_value",
              }
      Description: Create Endpoint Config & Sagemaker Endpoint
      Handler: index.lambda_handler
      MemorySize: 512
      Role: !GetAtt DeployEndpointLambdaExecutionRole.Arn
      Runtime: python3.12
      Timeout: 5

  StudioDomain:
    Type: AWS::SageMaker::Domain
    DependsOn: DomainDeploymentDelay
    Properties:
      AppNetworkAccessType: PublicInternetOnly
      AuthMode: IAM
      DefaultUserSettings:
          ExecutionRole: !GetAtt SageMakerExecutionRole.Arn
      DomainName: !Ref DomainName
      SubnetIds: !GetAtt DefaultVpcFinder.Subnets
      VpcId: !GetAtt DefaultVpcFinder.VpcId

  EnableProjectsLambda:
    Type: AWS::Lambda::Function
    DependsOn: StudioDomain
    Properties:
      FunctionName: CFEnableSagemakerProjects
      Code:
        ZipFile: |
          # Function: CFEnableSagemakerProjects
          # Purpose:  Enables Sagemaker Projects
          import json
          import boto3
          import cfnresponse

          client = boto3.client('sagemaker')
          sc_client = boto3.client('servicecatalog')

          def lambda_handler(event, context):
              response_status = cfnresponse.SUCCESS
              execution_role = event['ResourceProperties']['ExecutionRole']

              if 'RequestType' in event and event['RequestType'] == 'Create':
                  enable_projects(execution_role)
              cfnresponse.send(event, context, response_status, {}, '')


          def enable_projects(studio_role_arn):
              # enable Project on account level (accepts portfolio share)
              response = client.enable_sagemaker_servicecatalog_portfolio()

              # associate studio role with portfolio
              response = sc_client.list_accepted_portfolio_shares()

              portfolio_id = ''
              for portfolio in response['PortfolioDetails']:
                  if portfolio['ProviderName'] == 'Amazon SageMaker':
                      portfolio_id = portfolio['Id']

              response = sc_client.associate_principal_with_portfolio(
                  PortfolioId=portfolio_id,
                  PrincipalARN=studio_role_arn,
                  PrincipalType='IAM'
              )
      Description: Enable Sagemaker Projects
      Handler: index.lambda_handler
      MemorySize: 512
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Timeout: 5

  EnableProjects:
    Type: Custom::ResourceForEnablingSageMakerProjects
    Properties:
      ServiceToken: !GetAtt EnableProjectsLambda.Arn
      ExecutionRole: !GetAtt SageMakerExecutionRole.Arn

  UserProfile:
    Type: AWS::SageMaker::UserProfile
    Properties:
      DomainId: !GetAtt StudioDomain.DomainId
      UserProfileName: !Ref UserProfileName
      UserSettings:
        ExecutionRole: !GetAtt SageMakerExecutionRole.Arn


### Roles for Sagemaker projects
  AmazonSageMakerServiceCatalogProductsLaunchRoleForChatbot:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: AmazonSageMakerServiceCatalogProductsLaunchRoleForChatBot
      Description: "SageMaker role created from the SageMaker AWS Management Console. This role has the permissions required to launch the Amazon SageMaker portfolio of products from AWS ServiceCatalog."
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "servicecatalog.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/service-role/"
      MaxSessionDuration: 3600
      Policies:
        - PolicyName: AmazonSageMakerAdmin-ServiceCatalogProductsServiceRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'apigateway:GET'
                  - 'apigateway:POST'
                  - 'apigateway:PUT'
                  - 'apigateway:PATCH'
                  - 'apigateway:DELETE'
                Resource: '*'
                Condition:
                  StringLike:
                    'aws:ResourceTag/sagemaker:launch-source': '*'
              - Effect: Allow
                Action:
                  - 'apigateway:POST'
                Resource: '*'
                Condition:
                  'ForAnyValue:StringLike':
                    'aws:TagKeys':
                      - 'sagemaker:launch-source'
              - Effect: Allow
                Action:
                  - 'apigateway:PATCH'
                Resource:
                  - 'arn:aws:apigateway:*::/account'
              - Effect: Allow
                Action:
                  - 'cloudformation:CreateStack'
                  - 'cloudformation:UpdateStack'
                  - 'cloudformation:DeleteStack'
                Resource: 'arn:aws:cloudformation:*:*:stack/SC-*'
                Condition:
                  ArnLikeIfExists:
                    'cloudformation:RoleArn':
                      - 'arn:aws:sts::*:assumed-role/AmazonSageMakerServiceCatalog*'
              - Effect: Allow
                Action:
                  - 'cloudformation:DescribeStackEvents'
                  - 'cloudformation:DescribeStacks'
                Resource: 'arn:aws:cloudformation:*:*:stack/SC-*'
              - Effect: Allow
                Action:
                  - 'cloudformation:GetTemplateSummary'
                  - 'cloudformation:ValidateTemplate'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'codebuild:CreateProject'
                  - 'codebuild:DeleteProject'
                  - 'codebuild:UpdateProject'
                Resource:
                  - 'arn:aws:codebuild:*:*:project/sagemaker-*'
              - Effect: Allow
                Action:
                  - 'codecommit:CreateCommit'
                  - 'codecommit:CreateRepository'
                  - 'codecommit:DeleteRepository'
                  - 'codecommit:GetRepository'
                  - 'codecommit:TagResource'
                Resource:
                  - 'arn:aws:codecommit:*:*:sagemaker-*'
              - Effect: Allow
                Action:
                  - 'codecommit:ListRepositories'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'codepipeline:CreatePipeline'
                  - 'codepipeline:DeletePipeline'
                  - 'codepipeline:GetPipeline'
                  - 'codepipeline:GetPipelineState'
                  - 'codepipeline:StartPipelineExecution'
                  - 'codepipeline:TagResource'
                  - 'codepipeline:UpdatePipeline'
                Resource:
                  - 'arn:aws:codepipeline:*:*:sagemaker-*'
              - Effect: Allow
                Action:
                  - 'cognito-idp:CreateUserPool'
                Resource: '*'
                Condition:
                  'ForAnyValue:StringLike':
                    'aws:TagKeys':
                      - 'sagemaker:launch-source'
              - Effect: Allow
                Action:
                  - 'cognito-idp:CreateGroup'
                  - 'cognito-idp:CreateUserPoolDomain'
                  - 'cognito-idp:CreateUserPoolClient'
                  - 'cognito-idp:DeleteGroup'
                  - 'cognito-idp:DeleteUserPool'
                  - 'cognito-idp:DeleteUserPoolClient'
                  - 'cognito-idp:DeleteUserPoolDomain'
                  - 'cognito-idp:DescribeUserPool'
                  - 'cognito-idp:DescribeUserPoolClient'
                  - 'cognito-idp:UpdateUserPool'
                  - 'cognito-idp:UpdateUserPoolClient'
                Resource: '*'
                Condition:
                  StringLike:
                    'aws:ResourceTag/sagemaker:launch-source': '*'
              - Action:
                  - 'ecr:CreateRepository'
                  - 'ecr:DeleteRepository'
                Resource:
                  - 'arn:aws:ecr:*:*:repository/sagemaker-*'
                Effect: Allow
              - Effect: Allow
                Action:
                  - 'events:DescribeRule'
                  - 'events:DeleteRule'
                  - 'events:DisableRule'
                  - 'events:EnableRule'
                  - 'events:PutRule'
                  - 'events:PutTargets'
                  - 'events:RemoveTargets'
                Resource:
                  - 'arn:aws:events:*:*:rule/sagemaker-*'
              - Effect: Allow
                Action:
                  - 'firehose:CreateDeliveryStream'
                  - 'firehose:DeleteDeliveryStream'
                  - 'firehose:DescribeDeliveryStream'
                  - 'firehose:StartDeliveryStreamEncryption'
                  - 'firehose:StopDeliveryStreamEncryption'
                  - 'firehose:UpdateDestination'
                Resource: 'arn:aws:firehose:*:*:deliverystream/sagemaker-*'
              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                Resource:
                  - 'arn:aws:iam::*:role/service-role/AmazonSageMakerServiceCatalog*'
              - Effect: Allow
                Action:
                  - 'lambda:AddPermission'
                  - 'lambda:CreateFunction'
                  - 'lambda:DeleteFunction'
                  - 'lambda:GetFunction'
                  - 'lambda:GetFunctionConfiguration'
                  - 'lambda:InvokeFunction'
                  - 'lambda:RemovePermission'
                Resource:
                  - 'arn:aws:lambda:*:*:function:sagemaker-*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:DeleteLogGroup'
                  - 'logs:DeleteLogStream'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                  - 'logs:PutRetentionPolicy'
                Resource:
                  - 'arn:aws:logs:*:*:log-group:/aws/apigateway/AccessLogs/*'
                  - 'arn:aws:logs:*:*:log-group::log-stream:*'
              - Effect: Allow
                Action: 's3:GetObject'
                Resource: '*'
                Condition:
                  StringEquals:
                    's3:ExistingObjectTag/servicecatalog:provisioning': 'true'
              - Effect: Allow
                Action: 's3:GetObject'
                Resource:
                  - 'arn:aws:s3:::sagemaker-*'
              - Effect: Allow
                Action:
                  - 's3:CreateBucket'
                  - 's3:DeleteBucket'
                  - 's3:DeleteBucketPolicy'
                  - 's3:GetBucketPolicy'
                  - 's3:PutBucketAcl'
                  - 's3:PutBucketNotification'
                  - 's3:PutBucketPolicy'
                  - 's3:PutBucketPublicAccessBlock'
                  - 's3:PutBucketLogging'
                  - 's3:PutEncryptionConfiguration'
                Resource: 'arn:aws:s3:::sagemaker-*'
              - Action:
                  - 'sagemaker:CreateEndpoint'
                  - 'sagemaker:CreateEndpointConfig'
                  - 'sagemaker:CreateModel'
                  - 'sagemaker:CreateWorkteam'
                  - 'sagemaker:DeleteEndpoint'
                  - 'sagemaker:DeleteEndpointConfig'
                  - 'sagemaker:DeleteModel'
                  - 'sagemaker:DeleteWorkteam'
                  - 'sagemaker:DescribeModel'
                  - 'sagemaker:DescribeEndpointConfig'
                  - 'sagemaker:DescribeEndpoint'
                  - 'sagemaker:DescribeWorkteam'
                Resource:
                  - 'arn:aws:sagemaker:*:*:*'
                Effect: Allow
              - Action:
                  - 'states:CreateStateMachine'
                  - 'states:DeleteStateMachine'
                  - 'states:UpdateStateMachine'
                Resource:
                  - 'arn:aws:states:*:*:stateMachine:sagemaker-*'
                Effect: Allow


  AmazonSageMakerServiceCatalogProductsUseRoleForChatBot:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: AmazonSageMakerServiceCatalogProductsUseRoleForChatBot
      Description: "SageMaker role created from the SageMaker AWS Management Console. This role has the permissions required to use the Amazon SageMaker portfolio of products from AWS ServiceCatalog."
      Path: "/service-role/"
      MaxSessionDuration: 3600
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "cloudformation.amazonaws.com"
                - "apigateway.amazonaws.com"
                - "lambda.amazonaws.com"
                - "codebuild.amazonaws.com"
                - "sagemaker.amazonaws.com"
                - "glue.amazonaws.com"
                - "events.amazonaws.com"
                - "states.amazonaws.com"
                - "codepipeline.amazonaws.com"
                - "firehose.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: AmazonSageMakerServiceCatalogProductsUseRole-20210122T152377
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Action:
                  - cloudformation:CreateChangeSet
                  - cloudformation:CreateStack
                  - cloudformation:DescribeChangeSet
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeStacks
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:SetStackPolicy
                  - cloudformation:UpdateStack
                Resource: arn:aws:cloudformation:*:*:stack/sagemaker-*
                Effect: Allow
              -
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"
                Effect: Allow
              -
                Action:
                  - iam:PassRole
                Resource:
                  - arn:aws:iam::*:role/service-role/AmazonSageMakerServiceCatalogProductsUse*
                Effect: Allow
              -
                Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - arn:aws:lambda:*:*:function:sagemaker-*
              -
                Action:
                  - logs:CreateLogDelivery
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DeleteLogDelivery
                  - logs:Describe*
                  - logs:GetLogDelivery
                  - logs:GetLogEvents
                  - logs:ListLogDeliveries
                  - logs:PutLogEvents
                  - logs:PutResourcePolicy
                  - logs:UpdateLogDelivery
                Resource: "*"
                Effect: Allow
              -
                Effect: Allow
                Action:
                  - s3:CreateBucket
                  - s3:DeleteBucket
                  - s3:GetBucketAcl
                  - s3:GetBucketCors
                  - s3:GetBucketLocation
                  - s3:ListAllMyBuckets
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                  - s3:PutBucketCors
                Resource:
                  - arn:aws:s3:::sagemaker-*
              -
                Effect: Allow
                Action:
                  - s3:AbortMultipartUpload
                  - s3:DeleteObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                Resource:
                  - arn:aws:s3:::aws-glue-*
                  - arn:aws:s3:::sagemaker-*
              -
                Effect: Allow
                Action:
                  - sagemaker:*
                NotResource:
                  - arn:aws:sagemaker:*:*:domain/*
                  - arn:aws:sagemaker:*:*:user-profile/*
                  - arn:aws:sagemaker:*:*:app/*
                  - arn:aws:sagemaker:*:*:flow-definition/*
              -
                Action:
                  - states:DescribeExecution
                  - states:DescribeStateMachine
                  - states:DescribeStateMachineForExecution
                  - states:GetExecutionHistory
                  - states:ListExecutions
                  - states:ListTagsForResource
                  - states:StartExecution
                  - states:StopExecution
                  - states:TagResource
                  - states:UntagResource
                  - states:UpdateStateMachine
                Resource:
                  - arn:aws:states:*:*:stateMachine:sagemaker-*
                  - arn:aws:states:*:*:execution:sagemaker-*:*
                Effect: Allow
              -
                Action:
                  - states:ListStateMachines
                Resource: "*"
                Effect: Allow
  KendraIndex:
      Type: "AWS::Kendra::Index"
      Properties:
          Name: "genaichatbot-index"
          Edition: "DEVELOPER_EDITION"
          RoleArn: !GetAtt IAMRole.Arn
          Description: "genaichatbot-index"
          CapacityUnits: 
              StorageCapacityUnits: 0
              QueryCapacityUnits: 0
          DocumentMetadataConfigurations: 
            - 
              Name: "_authors"
              Type: "STRING_LIST_VALUE"
              Search: 
                  Facetable: false
                  Searchable: false
                  Displayable: false
                  Sortable: false
              Relevance: 
                  Importance: 1
            - 
              Name: "_category"
              Type: "STRING_VALUE"
              Search: 
                  Facetable: false
                  Searchable: false
                  Displayable: false
                  Sortable: true
              Relevance: 
                  Importance: 1
            - 
              Name: "_created_at"
              Type: "DATE_VALUE"
              Search: 
                  Facetable: false
                  Searchable: false
                  Displayable: false
                  Sortable: true
              Relevance: 
                  Freshness: false
                  Importance: 1
                  Duration: "25920000s"
                  RankOrder: "ASCENDING"
            - 
              Name: "_data_source_id"
              Type: "STRING_VALUE"
              Search: 
                  Facetable: false
                  Searchable: false
                  Displayable: false
                  Sortable: true
              Relevance: 
                  Importance: 1
            - 
              Name: "_document_title"
              Type: "STRING_VALUE"
              Search: 
                  Facetable: false
                  Searchable: true
                  Displayable: true
                  Sortable: true
              Relevance: 
                  Importance: 2
            - 
              Name: "_excerpt_page_number"
              Type: "LONG_VALUE"
              Search: 
                  Facetable: false
                  Searchable: false
                  Displayable: false
                  Sortable: false
              Relevance: 
                  Importance: 1
                  RankOrder: "ASCENDING"
            - 
              Name: "_faq_id"
              Type: "STRING_VALUE"
              Search: 
                  Facetable: false
                  Searchable: false
                  Displayable: false
                  Sortable: true
              Relevance: 
                  Importance: 1
            - 
              Name: "_file_type"
              Type: "STRING_VALUE"
              Search: 
                  Facetable: false
                  Searchable: false
                  Displayable: false
                  Sortable: true
              Relevance: 
                  Importance: 1
            - 
              Name: "_language_code"
              Type: "STRING_VALUE"
              Search: 
                  Facetable: false
                  Searchable: false
                  Displayable: false
                  Sortable: true
              Relevance: 
                  Importance: 1
            - 
              Name: "_last_updated_at"
              Type: "DATE_VALUE"
              Search: 
                  Facetable: false
                  Searchable: false
                  Displayable: false
                  Sortable: true
              Relevance: 
                  Freshness: false
                  Importance: 1
                  Duration: "25920000s"
                  RankOrder: "ASCENDING"
            - 
              Name: "_source_uri"
              Type: "STRING_VALUE"
              Search: 
                  Facetable: false
                  Searchable: false
                  Displayable: true
                  Sortable: false
              Relevance: 
                  Importance: 1
            - 
              Name: "_tenant_id"
              Type: "STRING_VALUE"
              Search: 
                  Facetable: false
                  Searchable: false
                  Displayable: false
                  Sortable: true
              Relevance: 
                  Importance: 1
            - 
              Name: "_version"
              Type: "STRING_VALUE"
              Search: 
                  Facetable: false
                  Searchable: false
                  Displayable: false
                  Sortable: true
              Relevance: 
                  Importance: 1
            - 
              Name: "_view_count"
              Type: "LONG_VALUE"
              Search: 
                  Facetable: false
                  Searchable: false
                  Displayable: false
                  Sortable: true
              Relevance: 
                  Importance: 1
                  RankOrder: "ASCENDING"

  IAMRole:
      Type: "AWS::IAM::Role"
      Properties:
          Path: "/service-role/"
          RoleName: !Sub "AmazonKendra-${AWS::Region}-a-genaichatbot-index-role"
          AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"kendra.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
          MaxSessionDuration: 3600
          ManagedPolicyArns: 
            - !Ref IAMManagedPolicy
            - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
          Description: !Sub "AmazonKendra-${AWS::Region}-a-genaichatbot-index-role"

  IAMManagedPolicy:
      Type: "AWS::IAM::ManagedPolicy"
      Properties:
          ManagedPolicyName: !Sub "AmazonKendra-${AWS::Region}-a-genaichatbot-index-role-policy"
          Path: "/service-role/"
          PolicyDocument: !Sub |
              {
                  "Version": "2012-10-17",
                  "Statement": [
                      {
                          "Effect": "Allow",
                          "Action": [
                              "cloudwatch:PutMetricData"
                          ],
                          "Resource": "*",
                          "Condition": {
                              "StringEquals": {
                                  "cloudwatch:namespace": "AWS/Kendra"
                              }
                          }
                      },
                      {
                          "Effect": "Allow",
                          "Action": [
                              "logs:DescribeLogGroups"
                          ],
                          "Resource": "*"
                      },
                      {
                          "Effect": "Allow",
                          "Action": [
                              "logs:CreateLogGroup"
                          ],
                          "Resource": [
                              "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/kendra/*"
                          ]
                      },
                      {
                          "Effect": "Allow",
                          "Action": [
                              "logs:DescribeLogStreams",
                              "logs:CreateLogStream",
                              "logs:PutLogEvents"
                          ],
                          "Resource": [
                              "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/kendra/*:log-stream:*"
                          ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                            "kendra:BatchPutDocument",
                            "kendra:BatchDeleteDocument"
                        ],
                        "Resource": "arn:aws:kendra:${AWS::Region}:${AWS::AccountId}:index/*"
                    }
                  ]
              }
Outputs:
  DeployEndpointLambda:
    Value: !GetAtt DeployEndpointLambda.Arn
